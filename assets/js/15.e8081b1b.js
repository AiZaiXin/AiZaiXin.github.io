(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{376:function(a,e,n){"use strict";n.r(e);var t=n(45),r=Object(t.a)({},(function(){var a=this,e=a.$createElement,n=a._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h2",{attrs:{id:"spring-boot"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot"}},[a._v("#")]),a._v(" Spring Boot")]),a._v(" "),n("h3",{attrs:{id:"spring-boot配置绑定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot配置绑定"}},[a._v("#")]),a._v(" Spring Boot配置绑定")]),a._v(" "),n("p",[a._v("所谓“配置绑定”就是把配置文件中的值与 JavaBean 中对应的属性进行绑定。通常，我们会把一些配置信息（例如，数据库配置）放在配置文件中，然后通过 Java 代码去读取该配置文件，并且把配置文件中指定的配置封装到 JavaBean（实体类） 中。")]),a._v(" "),n("p",[a._v("SpringBoot 提供了以下 2 种方式进行配置绑定：\n使用 @ConfigurationProperties 注解\n使用 @Value 注解")]),a._v(" "),n("h3",{attrs:{id:"configurationproperties"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configurationproperties"}},[a._v("#")]),a._v(" @ConfigurationProperties")]),a._v(" "),n("p",[a._v("通过 Spring Boot 提供的 @ConfigurationProperties 注解，可以将全局配置文件中的配置数据绑定到 JavaBean 中。下面我们以 Spring Boot 项目 helloworld 为例，演示如何通过 @ConfigurationProperties 注解进行配置绑定。")]),a._v(" "),n("ol",[n("li",[a._v("在 helloworld 的全局配置文件 appilcation.yml 中添加以下自定义属性。")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("person:\n  lastName: 张三\n  age: 18\n  boss: false\n  birth: 1990/12/12\n  maps: { k1: v1, k2: 12}\n  list:\n    - 李四\n    - 阿萨德\n  dog:\n    name: 泰迪\n    age: 5\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[a._v("在 helloworld 项目的 com.aizaixin.bean 中创建一个名为 Person 的实体类，并将配置文件中的属性映射到这个实体类上，代码如下。")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('/**\n* 将配置文件中配置的每一个属性的值，映射到这个组件中\n*\n* @ConfigurationProperties：告诉 SpringBoot 将本类中的所有属性和配置文件中相关的配置进行绑定；\n* prefix = "person"：配置文件中哪个下面的所有属性进行一一映射\n*\n* 只有这个组件是容器中的组件，才能使用容器提供的@ConfigurationProperties功能；\n*/\n@Data\n@Component\n@ConfigurationProperties(prefix = "person")\npublic class Person {\n    private String lastName;\n    private Integer age;\n    private Boolean boss;\n    private Date birth;\n    private Map<String, Object> maps;\n    private List<Object> lists;\n    private Dog dog;\n}\n\n')])])]),n("p",[a._v('注意：\n只有在容器中的组件，才会拥有 SpringBoot 提供的强大功能。如果我们想要使用 @ConfigurationProperties 注解进行配置绑定，那么首先就要保证该对 JavaBean 对象在 IoC 容器中，所以需要用到 @Component 注解来添加组件到容器中。\nJavaBean 上使用了注解 @ConfigurationProperties(prefix = "person") ，它表示将这个 JavaBean 中的所有属性与配置文件中以“person”为前缀的配置进行绑定。\n3. 在 com.aizaixin.bean 中，创建一个名为 Dog 的 JavaBean，代码如下。')]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("@Data\npublic class Dog {\n    private String name;\n    private String age;\n}\n\n")])])]),n("ol",{attrs:{start:"4"}},[n("li",[a._v("修改 HelloController 的代码，在浏览器中展示配置文件中各个属性值，代码如下。")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('@Controller\npublic class HelloController {\n\n    @Autowired\n    private Person person;\n\n    @RequestMapping("/hello")\n    @ResponseBody\n    public Person hello () {\n        return person;\n    }\n}\n')])])]),n("ol",{attrs:{start:"5"}},[n("li",[a._v("重启项目，使用浏览器访问 “http://localhost:8081/hello”，结果如下图。")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('{"lastName":"张三","age":18,"boss":false,"birth":"1990-12-11T16:00:00.000+0000","maps":{"k1":"v1","k2":12},"lists":null,"dog":{"name":"泰迪","age":"5"}}\n')])])]),n("h2",{attrs:{id:"value"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#value"}},[a._v("#")]),a._v(" @Value")]),a._v(" "),n("p",[a._v("当我们只需要读取配置文件中的某一个配置时，可以通过 @Value 注解获取")]),a._v(" "),n("ol",[n("li",[a._v("以 Spring Boot 项目 helloworld 为例，修改实体类 Person 中的代码，使用 @Value 注解进行配置绑定，代码如下。")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('@Data\n@Component\n//@ConfigurationProperties(prefix = "person")\npublic class Person {\n    @Value("${person.lastName}")\n    private String lastName;\n    @Value("${person.age}")\n    private Integer age;\n    @Value("${person.boss}")\n    private Boolean boss;\n    @Value("${person.birth}")\n    private Date birth;\n\n    private Map<String, Object> maps;\n    private List<Object> lists;\n    private Dog dog;\n}\n')])])]),n("ol",{attrs:{start:"2"}},[n("li",[a._v("重启项目，使用浏览器访问 “http://localhost:8081/hello”，结果如下图。")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('{"lastName":"张三","age":18,"boss":false,"birth":"1990-12-11T16:00:00.000+0000","maps":null,"lists":null,"dog":null}\n')])])]),n("h3",{attrs:{id:"value-与-configurationproperties-对比"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#value-与-configurationproperties-对比"}},[a._v("#")]),a._v(" Value 与 @ConfigurationProperties 对比")]),a._v(" "),n("p",[a._v("@Value 和 @ConfigurationProperties 注解都能读取配置文件中的属性值并绑定到 JavaBean 中，但两者存在以下不同。")]),a._v(" "),n("ol",[n("li",[a._v("使用位置不同")])]),a._v(" "),n("p",[a._v("@ConfigurationProperties：标注在 JavaBean 的类名上；\n@Value：标注在 JavaBean 的属性上。\n2. 功能不同")]),a._v(" "),n("p",[a._v("@ConfigurationProperties：用于批量绑定配置文件中的配置；\n@Value：只能一个一个的指定需要绑定的配置。\n3. 松散绑定支持不同")]),a._v(" "),n("p",[a._v("@ConfigurationProperties：支持松散绑定（松散语法），例如实体类 Person 中有一个属性为 lastName，那么配置文件中的属性名支持以下写法：\nperson.firstName\nperson.first-name\nperson.first_name\nPERSON_FIRST_NAME")]),a._v(" "),n("p",[a._v("@Vaule：不支持松散绑定。\n4. SpEL 支持不同")]),a._v(" "),n("p",[a._v("@ConfigurationProperties：不支持 SpEL 表达式;\n@Value：支持 SpEL 表达式。\n5. 复杂类型封装")]),a._v(" "),n("p",[a._v("@ConfigurationProperties：支持所有类型数据的封装，例如 Map、List、Set、以及对象等；\n@Value：只支持基本数据类型的封装，例如字符串、布尔值、整数等类型。\n6. 应用场景不同")]),a._v(" "),n("p",[a._v("@Value 和 @ConfigurationProperties 两个注解之间，并没有明显的优劣之分，它们只是适合的应用场景不同而已。\n若只是获取配置文件中的某项值，则推荐使用 @Value 注解；\n若专门编写了一个 JavaBean 来和配置文件进行映射，则建议使用 @ConfigurationProperties 注解。")]),a._v(" "),n("p",[a._v("我们在选用时，根据实际应用场景选择合适的注解能达到事半功倍的效果。")]),a._v(" "),n("blockquote",[n("p",[a._v("引用部分")])])])}),[],!1,null,null,null);e.default=r.exports}}]);